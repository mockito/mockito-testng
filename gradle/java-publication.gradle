//Sources/javadoc artifacts required by Maven module publications
def licenseSpec = copySpec {
    from project.rootDir
    include "LICENSE"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    with licenseSpec
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from tasks.javadoc
    with licenseSpec
}

jar {
    with licenseSpec
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

//Gradle Maven publishing plugin configuration (https://docs.gradle.org/current/userguide/publishing_maven.html)
apply plugin: "maven-publish"
publishing {
    publications {
        javaLibrary(MavenPublication) { //name of the publication
            from components.java
            artifact sourcesJar
            artifact javadocJar

            artifactId = project.archivesBaseName

            pom {
                name = artifactId
                description = project.description

                url = "https://github.com/mockito/mockito-testng"
                licenses {
                    license {
                        name = 'The MIT License'
                        url = 'https://github.com/mockito/mockito-testng/blob/master/LICENSE'
                        distribution = 'repo'
                    }
                }
                developers {
                    ['mockitoguy:Szczepan Faber',
                     'mouyang:Matthew Ouyang',
                     'skabashnyuk:Sergii Kabashniuk',
                     'slawekjaranowski:Slawomir Jaranowski'].each { devData ->
                        developer {
                            def devInfo = devData.split(':')
                            id = devInfo[0]
                            name = devInfo[1]
                            url = 'https://github.com/' + devInfo[0]
                            roles = ["Core developer"]
                        }
                    }
                }
                scm {
                    url = 'https://github.com/mockito/mockito-testng.git'
                }
                issueManagement {
                    url = 'https://github.com/mockito/mockito-testng/issues'
                    system = 'GitHub issues'
                }
                ciManagement {
                    url = 'https://github.com/mockito/mockito-testng/actions'
                    system = 'GH Actions'
                }
            }
        }
    }

    //useful for testing - running "publish" will create artifacts/pom in a local dir
    repositories { maven { url = "$buildDir/repo" } }
}

//fleshes out problems with Maven pom generation when building
tasks.build.dependsOn("publishJavaLibraryPublicationToMavenLocal")

apply plugin: 'signing' //https://docs.gradle.org/current/userguide/signing_plugin.html
signing {
    if (System.getenv('PGP_KEY')) {
        useInMemoryPgpKeys(System.getenv('PGP_KEY'), System.getenv('PGP_PWD'))
        sign publishing.publications.javaLibrary
    }
}

apply plugin: 'io.github.gradle-nexus.publish-plugin'
nexusPublishing {
    repositories {
        if (System.getenv('NEXUS_TOKEN_PWD')) {
            sonatype {
                nexusUrl = uri('https://ossrh-staging-api.central.sonatype.com/service/local/')
                snapshotRepositoryUrl = uri('https://central.sonatype.com/repository/maven-snapshots/')

                username = System.getenv('NEXUS_TOKEN_USER')
                password = System.getenv('NEXUS_TOKEN_PWD')
            }
        }
    }
}
